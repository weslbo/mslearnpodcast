<speak xmlns="http://www.w3.org/2001/10/synthesis" xmlns:mstts="http://www.w3.org/2001/mstts" xmlns:emo="http://www.w3.org/2009/10/emotionml" version="1.0" xml:lang="en-US">
  <voice name="en-US-BrianNeural">Welcome to the Microsoft Learn Podcast! I'm your host, Brian, and today we have a special guest with us. Andrew, why don't you introduce yourself?</voice>
  <voice name="en-US-AndrewNeural">Thanks, Brian! I'm Andrew, and I work for Contoso. I'm excited to be here and talk about Azure Functions.</voice>
  <voice name="en-US-BrianNeural">Great to have you, Andrew! So let's start by talking about what Azure Functions is. Can you give us a brief overview?</voice>
  <voice name="en-US-AndrewNeural">Sure, Brian. Azure Functions is a serverless solution on Microsoft Azure. It allows you to write code for specific tasks without worrying about the infrastructure to run it.</voice>
  <voice name="en-US-BrianNeural">That sounds really convenient. So, how does Azure Functions compare to Azure Logic Apps and WebJobs?</voice>
  <voice name="en-US-AndrewNeural">Azure Functions and Azure Logic Apps are both serverless services, but they have different purposes. Azure Functions is a serverless compute service, while Azure Logic Apps is a serverless workflow integration platform. They can both create complex orchestrations, but the way you develop them is different.</voice>
  <voice name="en-US-BrianNeural">Interesting. Can you explain a bit more about the development differences between Azure Functions and Azure Logic Apps?</voice>
  <voice name="en-US-AndrewNeural">Certainly, Brian. With Azure Functions, you develop orchestrations by writing code and using the Durable Functions extension. On the other hand, Azure Logic Apps allows you to create orchestrations using a GUI or editing configuration files.</voice>
  <voice name="en-US-BrianNeural">That's a helpful distinction. Now, let's talk about Azure Functions and WebJobs. How do they compare?</voice>
  <voice name="en-US-AndrewNeural">Azure Functions and WebJobs are both code-first integration services, but Azure Functions offers more developer productivity. It also provides more options for programming languages, development environments, Azure service integration, and pricing. In most scenarios, Azure Functions is the better choice.</voice>
  <voice name="en-US-BrianNeural">Thanks for clarifying that, Andrew. Now, let's dive into the different hosting options for Azure Functions. Can you explain the three main hosting plans?</voice>
  <voice name="en-US-AndrewNeural">Of course, Brian. The three main hosting plans for Azure Functions are the Consumption plan, Premium plan, and Dedicated plan. The Consumption plan is the default and scales automatically based on the number of incoming events. The Premium plan offers pre-warmed workers, more powerful instances, and virtual network connectivity. The Dedicated plan allows you to run functions within an App Service plan at regular rates.</voice>
  <voice name="en-US-BrianNeural">That's helpful to know. Are there any other hosting options available for Azure Functions?</voice>
  <voice name="en-US-AndrewNeural">Yes, there are two additional hosting options. One is the App Service Environment (ASE), which provides a fully isolated and dedicated environment for running App Service apps at high scale. The other option is Kubernetes, which provides a fully isolated and dedicated environment running on top of the Kubernetes platform.</voice>
  <voice name="en-US-BrianNeural">Thanks for explaining that, Andrew. Now, let's talk about scaling Azure Functions. How does it work?</voice>
  <voice name="en-US-AndrewNeural">In the Consumption and Premium plans, Azure Functions scales by adding more instances of the Functions host based on the number of events that trigger a function. Each instance of the host has a limited amount of memory and CPU. The scale controller monitors the rate of events and determines when to scale out or scale in.</voice>
  <voice name="en-US-BrianNeural">That's interesting. Are there any limitations or behaviors to be aware of when it comes to scaling Azure Functions?</voice>
  <voice name="en-US-AndrewNeural">Yes, there are a few things to keep in mind. A single function app can scale out to a maximum of 200 instances. HTTP triggers allocate new instances once per second, while non-HTTP triggers allocate new instances once every 30 seconds. It's also important to note that after a function app has been idle for a while, the platform may scale the number of instances to zero, resulting in a cold start latency for the next request.</voice>
  <voice name="en-US-BrianNeural">Good to know. Now, let's talk about some specific details. What is the functionTimeout property and how does it affect function execution?</voice>
  <voice name="en-US-AndrewNeural">The functionTimeout property in the host.json file specifies the timeout duration for functions in a function app. Each hosting plan has default and maximum values for the timeout duration. For example, in the Consumption plan, the default timeout is 5 minutes, while in the Premium and Dedicated plans, the default timeout is 30 minutes. The maximum timeout is unlimited in the Premium and Dedicated plans.</voice>
  <voice name="en-US-BrianNeural">That's helpful information. Now, let's discuss storage account requirements for Azure Functions.</voice>
  <voice name="en-US-AndrewNeural">Every function app requires a general Azure Storage account, which supports Azure Blob, Queue, Files, and Table storage. Functions rely on Azure Storage for operations such as managing triggers and logging function executions. It's important to note that some storage accounts may not support queues and tables, so it's recommended to use a separate storage account for storage-intensive operations.</voice>
  <voice name="en-US-BrianNeural">Thanks for explaining that, Andrew. Now, let's wrap up with a quick knowledge check.</voice>
  <voice name="en-US-AndrewNeural">Sure, let's do it!</voice>
  <voice name="en-US-BrianNeural">Question 1: Which Azure Functions hosting plan is best when predictive scaling and costs are required?</voice>
  <voice name="en-US-AndrewNeural">The Functions Premium Plan.</voice>
  <voice name="en-US-BrianNeural">Correct! And question 2: Which option meets the requirements of a designer-first (declarative) development model for a serverless workflow?</voice>
  <voice name="en-US-AndrewNeural">Azure Logic Apps.</voice>
  <voice name="en-US-BrianNeural">That's right! Great job, Andrew. Well, that wraps up our discussion on Azure Functions. Thank you for joining us today!</voice>
  <voice name="en-US-AndrewNeural">Thank you, Brian. It was a pleasure being here.</voice>
  <voice name="en-US-BrianNeural">And thank you to our listeners for tuning in to the Microsoft Learn Podcast. We hope you found this episode informative. Stay tuned for more exciting topics in the future. Until next time, happy learning!</voice>
</speak>