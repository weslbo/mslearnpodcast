<speak xmlns="http://www.w3.org/2001/10/synthesis" xmlns:mstts="http://www.w3.org/2001/mstts" xmlns:emo="http://www.w3.org/2009/10/emotionml" version="1.0" xml:lang="en-US">
<voice name="en-US-BrianNeural">Welcome to the Microsoft Learn Podcast! I'm your host, Brian, and today we have a special guest with us. Andrew, who works for Contoso, will be joining us to talk about Azure App Service. Welcome, Andrew!</voice>

<voice name="en-US-AndrewNeural">Thank you, Brian. I'm excited to be here and share my knowledge about Azure App Service.</voice>

<voice name="en-US-BrianNeural">Great! Let's dive right in. Andrew, can you start by explaining what Azure App Service is and its key components?</voice>

<voice name="en-US-AndrewNeural">Sure, Brian. Azure App Service is an HTTP-based service for hosting web applications, REST APIs, and mobile backends. It allows you to develop in your favorite programming language or framework and runs on both Windows and Linux-based environments.</voice>

<voice name="en-US-BrianNeural">That's interesting. So, what are some of the key features of Azure App Service?</voice>

<voice name="en-US-AndrewNeural">Well, one of the key features is built-in auto scale support. This means that you can easily scale up or down the resources of the underlying machine hosting your web app, depending on its usage. You can also scale out or in by increasing or decreasing the number of machine instances running your web app.</voice>

<voice name="en-US-BrianNeural">That sounds convenient. What about continuous integration and deployment support?</voice>

<voice name="en-US-AndrewNeural">Azure App Service provides out-of-the-box continuous integration and deployment with Azure DevOps Services, GitHub, Bitbucket, FTP, or a local Git repository. You can connect your web app with any of these sources, and App Service will automatically sync your code and any future changes into the web app.</voice>

<voice name="en-US-BrianNeural">That's a great feature. I also noticed something about deployment slots. Can you explain what those are?</voice>

<voice name="en-US-AndrewNeural">Certainly. Deployment slots are separate environments where you can deploy your web app instead of the default production slot. This is available in the Standard App Service Plan tier or better. Deployment slots have their own host names, and you can swap content and configurations between slots, including the production slot.</voice>

<voice name="en-US-BrianNeural">That's really useful for testing and staging. Now, I see that App Service can also run on Linux. Can you tell us more about that?</voice>

<voice name="en-US-AndrewNeural">Absolutely. App Service can host web apps natively on Linux for supported application stacks. It can also run custom Linux containers, known as Web App for Containers. There are many language-specific built-in images available, such as Node.js, Java, PHP, Python, .NET, and Ruby. If your required runtime isn't supported, you can deploy it with a custom container.</voice>

<voice name="en-US-BrianNeural">That's great to know. Are there any limitations to using App Service on Linux?</voice>

<voice name="en-US-AndrewNeural">Yes, there are a few limitations. App Service on Linux isn't supported on the Shared pricing tier. The Azure portal only shows features that currently work for Linux apps, and the disk latency of the storage volume for web content is higher and more variable compared to the container filesystem.</voice>

<voice name="en-US-BrianNeural">Thanks for clarifying that. Now, let's talk about App Service plans. What exactly is an App Service plan?</voice>

<voice name="en-US-AndrewNeural">An App Service plan is where your app runs. It defines a set of compute resources for your web app to run. You can have multiple apps running on the same computing resources within an App Service plan. The plan determines the operating system, region, number and size of VM instances, and the pricing tier.</voice>

<voice name="en-US-BrianNeural">I see. So, what are the different pricing tiers available for App Service plans?</voice>

<voice name="en-US-AndrewNeural">There are a few categories of pricing tiers. The Shared compute tier includes Free and Shared plans, which run apps on the same Azure VM as other App Service apps. The Dedicated compute tier includes Basic, Standard, Premium, PremiumV2, and PremiumV3 plans, which run apps on dedicated Azure VMs. The Isolated tier includes Isolated and IsolatedV2 plans, which run dedicated Azure VMs on dedicated Azure Virtual Networks.</voice>

<voice name="en-US-BrianNeural">That's a good breakdown of the pricing tiers. Now, how does an app run and scale within an App Service plan?</voice>

<voice name="en-US-AndrewNeural">In the Free and Shared tiers, an app receives CPU minutes on a shared VM instance and can't scale out. In other tiers, an app runs on all the VM instances configured in the App Service plan. If you have multiple apps or deployment slots in the same plan, they all share the same VM instances. The plan is the scale unit for the apps, so if you scale the plan, all the apps within it are scaled accordingly.</voice>

<voice name="en-US-BrianNeural">That makes sense. What if an app needs more capabilities or features?</voice>

<voice name="en-US-AndrewNeural">If an app needs more capabilities or features, you can simply scale up or down the App Service plan. This can be done by changing the pricing tier of the plan. If you want to isolate the compute resources for a specific app, you can move it to a separate App Service plan. This allows you to scale the app independently and have greater control over its resources.</voice>

<voice name="en-US-BrianNeural">That's a good solution for apps with specific requirements. Now, let's talk about deploying to App Service. What are the options for automated deployment?</voice>

<voice name="en-US-AndrewNeural">Azure App Service supports automated deployment directly from several sources. You can push your code to Azure DevOps Services, GitHub, or Bitbucket. The Azure portal provides out-of-the-box continuous integration and deployment with these platforms. Any changes you push to your repository are automatically deployed to your App Service web app.</voice>

<voice name="en-US-BrianNeural">That's convenient for developers. And what about manual deployment?</voice>

<voice name="en-US-AndrewNeural">There are a few options for manual deployment. You can use Git and add the App Service web app's Git URL as a remote repository. Pushing to the remote repository deploys your app. Another option is to use the Azure CLI command "webapp up", which packages and deploys your app. You can also use Zip deploy by sending a ZIP of your application files to App Service using curl or FTP/S.</voice>

<voice name="en-US-BrianNeural">Those are some great options for manual deployment. Now, I noticed something about deployment slots earlier. Can you explain how they can be used?</voice>

<voice name="en-US-AndrewNeural">Certainly. Deployment slots are useful when deploying a new production build. With a Standard App Service Plan tier or better, you can deploy your app to a staging environment using a separate deployment slot. Once you're ready, you can swap the staging and production slots. This operation warms up the necessary worker instances to match your production scale, eliminating downtime.</voice>

<voice name="en-US-BrianNeural">That's a smart way to handle deployments. Now, let's move on to authentication and authorization in App Service. Can you explain how App Service manages authentication and authorization?</voice>

<voice name="en-US-AndrewNeural">Azure App Service provides built-in authentication and authorization support, allowing you to sign in users and access data without writing much code. It integrates with various identity providers, such as Microsoft, Facebook, Google, Twitter, and more. The authentication and authorization module runs alongside your application code and handles user authentication, token validation, session management, and injecting identity information into HTTP request headers.</voice>

<voice name="en-US-BrianNeural">That's really convenient. Why would someone choose to use the built-in authentication instead of implementing it themselves?</voice>

<voice name="en-US-AndrewNeural">The built-in authentication feature saves time and effort by providing out-of-the-box integration with federated identity providers. It eliminates the need for specific language SDKs, security expertise, or extensive code changes. You can easily integrate with multiple login providers and focus on building the rest of your application.</voice>

<voice name="en-US-BrianNeural">That's a great advantage. Can you explain how the authentication flow works in App Service?</voice>

<voice name="en-US-AndrewNeural">The authentication flow is the same for all providers, but it differs depending on whether you're using the provider's SDK or not. Without the SDK, the application delegates federated sign-in to App Service, which manages the sign-in process. With the SDK, the application signs users in manually and submits the authentication token to App Service for validation. This applies to different types of apps, such as browser apps and browser-less apps like REST APIs or native mobile apps.</voice>

<voice name="en-US-BrianNeural">That's a clear explanation. Now, let's talk about authorization behavior in App Service. What options are available for handling unauthenticated requests?</voice>

<voice name="en-US-AndrewNeural">In the Azure portal, you can configure App Service to either allow unauthenticated requests or require authentication. Allowing unauthenticated requests defers authorization to your application code, giving you more flexibility in handling anonymous requests. Requiring authentication rejects any unauthenticated traffic and can redirect users to the configured identity providers for sign-in. You can also configure the rejection to be an HTTP 401 Unauthorized or HTTP 403 Forbidden for all requests.</voice>

<voice name="en-US-BrianNeural">That's good to know. Now, what about the token store in App Service?</voice>

<voice name="en-US-AndrewNeural">App Service provides a built-in token store, which is a repository of tokens associated with the users of your web apps, APIs, or native mobile apps. When you enable authentication with any provider, this token store is immediately available to your app. It simplifies token management and allows you to easily access and validate tokens for authorized access to data.</voice>

<voice name="en-US-BrianNeural">That's a useful feature. Lastly, let's discuss the networking features of App Service. How can you control inbound and outbound network traffic?</voice>

<voice name="en-US-AndrewNeural">By default, apps hosted in App Service are accessible through the internet and can reach internet-hosted endpoints. However, you can control inbound traffic using features like access restrictions, service endpoints, and private endpoints. For outbound traffic, you can use features like app-assigned addresses, hybrid connections, and virtual network integration to control the destinations and routes.</voice>

<voice name="en-US-BrianNeural">That's important for security and network management. Well, Andrew, thank you so much for sharing your insights on Azure App Service. It was a pleasure having you on the podcast.</voice>

<voice name="en-US-AndrewNeural">Thank you, Brian. I'm glad I could contribute to the discussion. Azure App Service is a powerful tool for hosting web apps, and I hope our listeners find this information helpful.</voice>

<voice name="en-US-BrianNeural">Absolutely. And thank you to our listeners for tuning in to the Microsoft Learn Podcast. We hope you found this episode informative. Stay tuned for more exciting topics in the future. Until next time!</voice>
</speak>