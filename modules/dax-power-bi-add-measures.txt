

# Introduction



Measures in Microsoft Power BI models are either implicit or explicit. Implicit measures are automatic behaviors that allow visuals to summarize model column data. Explicit measures, also known simply as measures, are calculations that you can add to your model. This module focuses on how you can use implicit measures.
In the Fields pane, a column that's shown with the sigma symbol ( â ) indicates two facts:

- It's a numeric column.
- It will summarize column values when it is used in a visual (when added to a field well that supports summarization).

In the following image, notice that the Sales table includes only fields that can be summarized, including the ProfitÂ Amount calculated column.



As a data modeler, you can control if and how the column summarizes by setting the Summarization property to Don't summarize or to a specific aggregation function. When you set the Summarization property to Don't summarize, the sigma symbol will no longer show next to the column in the Fields pane.
To observe how report authors can use implicit measures, you can first download and open the AdventureÂ WorksÂ DWÂ 2020Â M04.pbix file.
In the report, from the Sales table, add the SalesÂ Amount field to the matrix visual that groups fiscal year and month on its rows.



To determine how the column is summarized, in the visual fields pane, for the SalesÂ Amount field, select the arrow and then review the context menu options.



Notice that the Sum aggregation function has a check mark next to it. This check mark indicates that the column is summarized by summing column values together. It's also possible to change the aggregation function by selecting any of the other options like average, minimum, and so on.
Next, add the UnitÂ Price field to the matrix visual.



The default summarization is now set to Average (the modeler knows that it's inappropriate to sum unit price values together because they're rates, which are non-additive).



Implicit measures allow the report author to start with a default summarization technique and lets them modify it to suit their visual requirements.
Numeric columns support the greatest range of aggregation functions:

- Sum
- Average
- Minimum
- Maximum
- Count (Distinct)
- Count
- Standard deviation
- Variance
- Median


# Summarize non-numeric columns

Non-numeric columns can be summarized. However, the sigma symbol does not show next to non-numeric columns in the Fields pane because they don't summarize by default.
Text columns allow the following aggregations:

- First (alphabetically)
- Last (alphabetically)
- Count (Distinct)
- Count

Date columns allow the following aggregations:

- Earliest
- Latest
- Count (Distinct)
- Count

Boolean columns allow the following aggregations:

- Count (Distinct)
- Count


# Benefits of implicit measures

Several benefits are associated with implicit measures. Implicit measures are simple concepts to learn and use, and they provide flexibility in the way that report authors visualize model data. Additionally, they mean less work for you as a data modeler because you don't have to create explicit calculations.

# Limitations of implicit measures

Implicit measures do have limitations. Despite setting an appropriate summarization method, report authors could choose to aggregate a column in unsuitable ways. For example, in the matrix visual, you could modify the aggregate function of UnitÂ Price to Sum.



The report visual obeys your setup, but it has now produced a SumÂ ofÂ UnitÂ Price column, which presents misleading data.
The most significant limitation of implicit measures is that they only work for simple scenarios, meaning that they can only summarize column values that use a specific aggregation function. Therefore, in situations when you need to calculate the ratio of each month's sales amount over the yearly sales amount, you'll need to produce an explicit measure by writing a Data Analysis Expressions (DAX) formula to achieve that more sophisticated requirement.
Implicit measures don't work when the model is queried by using Multidimensional Expressions (MDX). This language expects explicit measures and can't summarize column data. It's used when a Power BI semantic model is queried by using Analyze in Excel or when a Power BI paginated report uses a query that is generated by the MDX graphical query designer.




Continue 






# Create simple measures



You can write a DAX formula to add a measure to any table in your model. A measure formula must return a scalar or single value.

Note
In tabular modeling, no such concept as a calculated measure exists. The word calculated is used to describe calculated tables and calculated columns. It distinguishes them from tables and columns that originate from Power Query, which doesn't have the concept of an explicit measure.

Measures don't store values in the model. Instead, they're used at query time to return summarizations of model data. Additionally, measures can't reference a table or column directly; they must pass the table or column into a function to produce a summarization.
A simple measure is one that aggregates the values of a single column; it does what implicit measures do automatically.
In the next example, you will add a measure to the Sales table. In the Fields pane, select the Sales table. To create a measure, in the TableÂ Tools contextual ribbon, from inside the Calculations group, select NewÂ measure.



In the formula bar, enter the following measure definition and then press Enter.
Revenue =
SUM(Sales[Sales Amount])

The measure definition adds the Revenue measure to the Sales table. It uses the SUM DAX function to sum the values of the SalesÂ Amount column.
On the MeasureÂ tools contextual ribbon, inside the Formatting group, set the decimal places to 2.




Tip
Immediately after you create a measure, set the formatting options to ensure well-presented and consistent values in all report visuals.

Now, add the Revenue measure to the matrix visual. Notice that it produces the same result as the SalesÂ Amount implicit measure.
In the matrix visual, remove SalesÂ Amount and SumÂ ofÂ UnitÂ Price.
Next, you will create more measures. Create the Cost measure by using the following measure definition, and then set the format with two decimal places.
Cost =
SUM(Sales[Total Product Cost])

Create the Profit measure, and then set the format with two decimal places.
Profit =
SUM(Sales[Profit Amount])

Notice that the ProfitÂ Amount column is a calculated column. This topic will be discussed later in this module.
Next, create the Quantity measure and format it as a whole number with the thousands separator.
Quantity =
SUM(Sales[Order Quantity])

Create three unit price measures and then set the format of each with two decimal places. Notice the different DAX aggregation functions that are used: MIN, MAX, and AVERAGE.
Minimum Price =
MIN(Sales[Unit Price])

Maximum Price =
MAX(Sales[Unit Price])

Average Price =
AVERAGE(Sales[Unit Price])

Now, hide the UnitÂ Price column, which results in report authors losing their ability to summarize the column except by using your measures.

Tip
Adding measures and hiding columns is how you, the data modeler, can limit summarization options.

Next, create the following two measures, which count the number of orders and order lines. Format both measures with zero decimal places.
Order Line Count =
COUNT(Sales[SalesOrderLineKey])

Order Count =
DISTINCTCOUNT('Sales Order'[Sales Order])

The COUNT DAX function counts the number of non-BLANK values in a column, while the DISTINCTCOUNT DAX function counts the number of distinct values in a column. Because an order can have one or more order lines, the SalesÂ Order column will have duplicate values. A distinct count of values in this column will correctly count the number of orders.
Alternatively, you can choose the better way to write the OrderÂ LineÂ Count measure. Instead of counting values in a column, it's semantically clearer to use the COUNTROWS DAX function. Unlike the previously introduced aggregation functions, which aggregate column values, the COUNTROWS function counts the number of rows for a table.
Modify the OrderÂ LineÂ Count measure formula you created above to the following parameters:
Order Line Count =
COUNTROWS(Sales)

Add each of the measures to the matrix visual.
All measures that you've created are considered simple measures because they aggregate a single column or single table.




Continue 






# Create compound measures



When a measure references one or more measures, it's known as a compound measure.
For this example, you will modify the Profit measure by using the following measure definition. Format the measure with two decimal places.
Profit =
[Revenue] - [Cost]

Next, add the Profit measure to the matrix visual.
Now that your model provides a way to summarize profit, you can delete the ProfitÂ Amount calculated column.
By removing this calculated column, you've optimized the semantic model. Removing this columns results in a decreased semantic model size and shorter data refresh times. The ProfitÂ Amount calculated column wasn't required because the Profit measure can directly produce the required result.




Continue 






# Create quick measures



Microsoft Power BI Desktop includes a feature named Quick Measures. This feature helps you to quickly perform common, powerful calculations by generating the DAX expression for you.
Many categories of calculations and ways to modify each calculation are available to fit your needs. Moreover, you are able to see the DAX that's generated by the quick measure and use it to jumpstart or expand your DAX knowledge.
In this next example, you'll create another compound measure to calculate profit margin. However, this time, you'll create it as a quick measure.
In the Fields pane, select the Sales table. On the TableÂ tools contextual ribbon, from inside the Calculations group, select Quick measure.



In the QuickÂ measures window, in the Calculation drop-down list, locate the MathematicalÂ operations group (you might need to scroll down the list) and then select Division.



From the Fields list (in the QuickÂ measures window), expand the Sales table and then drag the Profit measure into the Numerator box. Then, drag the Revenue measure into the Denominator box.



Select OK. In the Fields pane, notice the addition of the new compound measure. In the formula bar, review the measure definition.
Profit divided by Revenue = 
DIVIDE([Profit], [Revenue])


Note
After the quick measure has been created, you must apply any changes in the formula bar.

Rename the measure as ProfitÂ Margin, and then set the format to a percentage with two decimal places.
Add the ProfitÂ Margin measure to the matrix visual.




Continue 






# Compare calculated columns with measures



DAX beginners often experience a degree of confusion about calculated columns and measures. The following section reviews the similarities and differences between both.
Regarding similarities between calculated columns and measures, both are:

- Calculations that you can add to your semantic model.
- Defined by using a DAX formula.
- Referenced in DAX formulas by enclosing their names within square brackets.

The areas where calculated columns and measures differ include:

- Purpose - Calculated columns extend a table with a new column, while measures define how to summarize model data.
- Evaluation - Calculated columns are evaluated by using row context at data refresh time, while measures are evaluated by using filter context at query time. Filter context is introduced in a later module; it's an important topic to understand and master so that you can achieve complex summarizations.
- Storage - Calculated columns (in Import storage mode tables) store a value for each row in the table, but a measure never stores values in the model.
- Visual use - Calculated columns (like any column) can be used to filter, group, or summarize (as an implicit measure), whereas measures are designed to summarize.





Continue 




